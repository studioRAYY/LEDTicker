name: Build & Release (manual only, FFmpeg bundled)

on:
  workflow_dispatch:
    inputs:
      release:
        description: "Create GitHub Release from artifacts"
        required: false
        default: "false"
      tag:
        description: "Tag name for release (required if release=true)"
        required: false
        default: ""

permissions:
  contents: write

concurrency:
  group: manual-build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            py: '3.11'
            add_data_sep: ':'
            artifact_suffix: macOS
          - os: windows-latest
            py: '3.11'
            add_data_sep: ';'
            artifact_suffix: Windows

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.py }}

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller==6.6

      # ==== STATIC FFMPEG (macOS) ====
      - name: Download static FFmpeg (macOS)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p ffmpeg_static
          curl -L -o ffmpeg.zip "https://evermeet.cx/ffmpeg/ffmpeg-6.1.zip"
          unzip -j ffmpeg.zip -d ffmpeg_static
          chmod +x ffmpeg_static/ffmpeg
          ./ffmpeg_static/ffmpeg -version

      # ==== STATIC FFMPEG (Windows) ====
      - name: Download static FFmpeg (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          Set-StrictMode -Version Latest
          New-Item -ItemType Directory -Force -Path ffmpeg_static | Out-Null
          $url = "https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-essentials.zip"
          Invoke-WebRequest -Uri $url -OutFile "ffmpeg.zip"
          Expand-Archive -Path "ffmpeg.zip" -DestinationPath "ffmpeg_extracted" -Force
          $bin = Get-ChildItem -Path "ffmpeg_extracted" -Recurse -Filter "ffmpeg.exe" | Select-Object -First 1
          Copy-Item $bin.FullName "ffmpeg_static\ffmpeg.exe" -Force
          .\ffmpeg_static\ffmpeg.exe -version

      # ==== Build with PyInstaller ====
      - name: PyInstaller build (macOS/Windows)
        shell: bash
        run: |
          set -euo pipefail
          SEP="${{ matrix.add_data_sep }}"
          if [ "${{ runner.os }}" = "Windows" ]; then EXT=".exe"; else EXT=""; fi
          # --windowed sorgt dafÃ¼r, dass auf macOS eine .app entsteht (keine Terminal-App).
          pyinstaller \
            --name "StudioRayyTicker" \
            --windowed \
            --onefile \
            --noconfirm \
            --add-data "presets${SEP}presets" \
            --add-binary "ffmpeg_static/ffmpeg${EXT}${SEP}ffmpeg${EXT}" \
            main.py

      # ==== Prepare artifacts & DMG (macOS) ====
      - name: Package macOS .app and create DMG
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          set -euo pipefail
          APP="dist/StudioRayyTicker.app"

          # Sanity check
          [ -d "$APP" ] || { echo "App bundle not found at $APP"; ls -la dist; exit 1; }

          # Optional: ad-hoc sign to avoid quarantine warnings in some contexts
          codesign --force --deep -s - "$APP" || true

          # DMG source folder
          mkdir -p dmg_src
          cp -R "$APP" dmg_src/
          ln -s /Applications dmg_src/Applications

          # Create DMG
          hdiutil create -volname "StudioRayyTicker" -srcfolder dmg_src -ov -format UDZO "dist/StudioRayyTicker-macOS.dmg"

      # ==== Prepare artifacts (Windows) ====
      - name: Package Windows artifact
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          Set-StrictMode -Version Latest
          New-Item -ItemType Directory -Force -Path dist_pkg | Out-Null
          Copy-Item -Path "dist/StudioRayyTicker.exe" -Destination "dist_pkg/StudioRayyTicker-Windows.exe" -Force
          if (Test-Path "README.md") { Copy-Item "README.md" "dist_pkg/README.md" -Force }
          if (Test-Path "presets")   { Copy-Item "presets" "dist_pkg/presets" -Recurse -Force }
          Compress-Archive -Path "dist_pkg/*" -DestinationPath "dist/StudioRayyTicker-Windows.zip" -Force

      # ==== Upload artifacts ====
      - uses: actions/upload-artifact@v4
        if: matrix.os == 'macos-latest'
        with:
          name: StudioRayyTicker-macOS
          path: |
            dist/StudioRayyTicker.app
            dist/StudioRayyTicker-macOS.dmg

      - uses: actions/upload-artifact@v4
        if: matrix.os == 'windows-latest'
        with:
          name: StudioRayyTicker-Windows
          path: |
            dist/StudioRayyTicker-Windows.zip

  release:
    if: ${{ github.event.inputs.release == 'true' }}
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Ensure tag provided
        if: ${{ github.event.inputs.tag == '' }}
        run: |
          echo "ERROR: You must provide a tag when release=true" >&2
          exit 1

      - uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.tag }}
          files: |
            artifacts/StudioRayyTicker-Windows/**/*
            artifacts/StudioRayyTicker-macOS/**/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
